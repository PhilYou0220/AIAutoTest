{"name": "1.使用非正确格式的邮箱地址进行注册", "status": "failed", "statusDetails": {"message": "AssertionError: case1 注册--非邮箱格式，不应获得验证码失败\nassert {'code': 400,\\n 'error': 'gomail: could not send email 1: gomail: invalid address '\\n          '\"123456@qq\": mail: no angle-addr'} == {'message': '发送成功'}\n  Left contains 2 more items:\n  {'code': 400,\n   'error': 'gomail: could not send email 1: gomail: invalid address '\n            '\"123456@qq\": mail: no angle-addr'}\n  Right contains 1 more item:\n  {'message': '发送成功'}\n  Full diff:\n    {\n  -  'message': '发送成功',\n  +  'code': 400,\n  +  'error': 'gomail: could not send email 1: gomail: invalid address '\n  +           '\"123456@qq\": mail: no angle-addr',\n    }", "trace": "self = <test_register_login.TestRegisterLogin object at 0x0000024065690B20>\n\n    @allure.title(\"1.使用非正确格式的邮箱地址进行注册\")\n    @pytest.mark.register\n    @pytest.mark.run(order=1)\n    def test_register_001(self):\n        \"\"\"\n        第一步\n        第二步\n        第三步\n        :return:\n        \"\"\"\n        sql = \"SELECT * FROM aimarket_case_data where  id =1\"\n        result = db3.select(sql=sql)\n        id, method, url, data, expect_return_data, username, password, status_code, *ig = pd.parse_data(result[0])\n        dict_return_data, real_status_code = Auth().register_post(data=data, url=url)\n        dict_expect_return_data = json.loads(expect_return_data)\n    \n        sql1 = \"SELECT * FROM valid_code WHERE phone=\\\"123456@qq\\\" ORDER BY id LIMIT 1 \"\n        result1 = db2.select_real(sql1)\n        if dict_expect_return_data == dict_return_data and status_code == real_status_code and not result1:\n            log.debug(\n                f\" \\n账号{username}\\n url:{url}\\n 密码：{password}\\n 请求参数: {data}\\n 返回状态码: {real_status_code}\\n 返回值: {dict_return_data}\")\n        else:\n            log.error(\n                f\" \\n url:{url}\\n  请求参数: {data} \\n 预期状态码{status_code}\\n 返回状态码: {real_status_code}\\n 返回值: {dict_return_data} 预期返回值：{dict_expect_return_data}\")\n    \n>           assert dict_expect_return_data == dict_return_data, f\"case1 {ig[0]}--{ig[1]}失败\"\nE           AssertionError: case1 注册--非邮箱格式，不应获得验证码失败\nE           assert {'code': 400,\\n 'error': 'gomail: could not send email 1: gomail: invalid address '\\n          '\"123456@qq\": mail: no angle-addr'} == {'message': '发送成功'}\nE             Left contains 2 more items:\nE             {'code': 400,\nE              'error': 'gomail: could not send email 1: gomail: invalid address '\nE                       '\"123456@qq\": mail: no angle-addr'}\nE             Right contains 1 more item:\nE             {'message': '发送成功'}\nE             Full diff:\nE               {\nE             -  'message': '发送成功',\nE             +  'code': 400,\nE             +  'error': 'gomail: could not send email 1: gomail: invalid address '\nE             +           '\"123456@qq\": mail: no angle-addr',\nE               }\n\ntest_register_login.py:51: AssertionError"}, "description": "\n        第一步\n        第二步\n        第三步\n        :return:\n        ", "attachments": [{"name": "log", "source": "88343b4e-47a5-4b02-a306-f791252354cb-attachment.txt", "type": "text/plain"}], "start": 1647411409659, "stop": 1647411410555, "uuid": "85231bd5-844d-4b29-a13f-9662db9b0fd0", "historyId": "c3b1d409e81f67ba626da3b9415f0bab", "testCaseId": "4c7da472433ee7d0735cc2d38804649a", "fullName": "testcase.test_register_login.TestRegisterLogin#test_register_001", "labels": [{"name": "epic", "value": "注册-登录模块"}, {"name": "tag", "value": "run(order=1)"}, {"name": "tag", "value": "register"}, {"name": "parentSuite", "value": "testcase"}, {"name": "suite", "value": "test_register_login"}, {"name": "subSuite", "value": "TestRegisterLogin"}, {"name": "host", "value": "DESKTOP-4QMU2SQ"}, {"name": "thread", "value": "11224-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcase.test_register_login"}]}