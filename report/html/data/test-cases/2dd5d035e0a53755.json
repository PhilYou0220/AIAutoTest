{
  "uid" : "2dd5d035e0a53755",
  "name" : "1.使用非正确格式的邮箱地址进行注册",
  "fullName" : "testcase.test_register_login.TestRegisterLogin#test_register_001",
  "historyId" : "c3b1d409e81f67ba626da3b9415f0bab",
  "time" : {
    "start" : 1648721953520,
    "stop" : 1648721954501,
    "duration" : 981
  },
  "status" : "failed",
  "statusMessage" : "AssertionError: FAILURE: 预期和实际不一致 预期状态码400和实际状态码200\ntest_register_login.py:115 in test_register_001() -> check.equal(status_code, real_status_code, f\"预期和实际不一致 预期状态码{status_code}和实际状态码{real_status_code}\")\nFAILURE: 预期和实际不一致 预期返回值{'error': 'gomail: could not send email 1: gomail: invalid address \"123456@qq\": mail: no angle-addr', 'code': 400}和实际返回值{'message': '发送成功'}不一致\ntest_register_login.py:116 in test_register_001() -> check.equal(dict_expect_return_data, dict_return_data,\nFAILURE: 数据库有此条数据\ntest_register_login.py:121 in test_register_001() -> check.is_none(result1, \"数据库有此条数据\")\n------------------------------------------------------------\nFailed Checks: 3",
  "statusTrace" : "FAILURE: 预期和实际不一致 预期状态码400和实际状态码200\ntest_register_login.py:115 in test_register_001() -> check.equal(status_code, real_status_code, f\"预期和实际不一致 预期状态码{status_code}和实际状态码{real_status_code}\")\nFAILURE: 预期和实际不一致 预期返回值{'error': 'gomail: could not send email 1: gomail: invalid address \"123456@qq\": mail: no angle-addr', 'code': 400}和实际返回值{'message': '发送成功'}不一致\ntest_register_login.py:116 in test_register_001() -> check.equal(dict_expect_return_data, dict_return_data,\nFAILURE: 数据库有此条数据\ntest_register_login.py:121 in test_register_001() -> check.is_none(result1, \"数据库有此条数据\")\n------------------------------------------------------------\nFailed Checks: 3",
  "flaky" : false,
  "newFailed" : false,
  "newBroken" : false,
  "newPassed" : false,
  "retriesCount" : 0,
  "retriesStatusChange" : false,
  "beforeStages" : [ {
    "name" : "_xunit_setup_class_fixture_TestRegisterLogin",
    "time" : {
      "start" : 1648721953153,
      "stop" : 1648721953520,
      "duration" : 367
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "failed",
    "statusMessage" : "AssertionError: FAILURE: 预期和实际不一致 预期状态码400和实际状态码200\ntest_register_login.py:115 in test_register_001() -> check.equal(status_code, real_status_code, f\"预期和实际不一致 预期状态码{status_code}和实际状态码{real_status_code}\")\nFAILURE: 预期和实际不一致 预期返回值{'error': 'gomail: could not send email 1: gomail: invalid address \"123456@qq\": mail: no angle-addr', 'code': 400}和实际返回值{'message': '发送成功'}不一致\ntest_register_login.py:116 in test_register_001() -> check.equal(dict_expect_return_data, dict_return_data,\nFAILURE: 数据库有此条数据\ntest_register_login.py:121 in test_register_001() -> check.is_none(result1, \"数据库有此条数据\")\n------------------------------------------------------------\nFailed Checks: 3",
    "statusTrace" : "FAILURE: 预期和实际不一致 预期状态码400和实际状态码200\ntest_register_login.py:115 in test_register_001() -> check.equal(status_code, real_status_code, f\"预期和实际不一致 预期状态码{status_code}和实际状态码{real_status_code}\")\nFAILURE: 预期和实际不一致 预期返回值{'error': 'gomail: could not send email 1: gomail: invalid address \"123456@qq\": mail: no angle-addr', 'code': 400}和实际返回值{'message': '发送成功'}不一致\ntest_register_login.py:116 in test_register_001() -> check.equal(dict_expect_return_data, dict_return_data,\nFAILURE: 数据库有此条数据\ntest_register_login.py:121 in test_register_001() -> check.is_none(result1, \"数据库有此条数据\")\n------------------------------------------------------------\nFailed Checks: 3",
    "steps" : [ {
      "name" : "前提:\r\n1.打开网址http://106.75.154.221:8392/ 点击注册\r\n测试步骤:\r\n1.在账号栏输入账号：autotest_register、\r\n2.在邮箱栏输入邮箱：123456@qq \r\n3.点击发送按钮",
      "time" : {
        "start" : 1648721953601,
        "stop" : 1648721954355,
        "duration" : 754
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "stepsCount" : 0,
      "hasContent" : false
    } ],
    "attachments" : [ {
      "uid" : "565cdbef660a6bf2",
      "name" : "log",
      "source" : "565cdbef660a6bf2.txt",
      "type" : "text/plain",
      "size" : 395
    } ],
    "parameters" : [ ],
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true,
    "stepsCount" : 1,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "_xunit_setup_class_fixture_TestRegisterLogin::0",
    "time" : {
      "start" : 1648721954501,
      "stop" : 1648721954501,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "epic",
    "value" : "注册-登录模块"
  }, {
    "name" : "tag",
    "value" : "run(order=1)"
  }, {
    "name" : "tag",
    "value" : "register"
  }, {
    "name" : "parentSuite",
    "value" : "testcase"
  }, {
    "name" : "suite",
    "value" : "test_register_login"
  }, {
    "name" : "subSuite",
    "value" : "TestRegisterLogin"
  }, {
    "name" : "host",
    "value" : "DESKTOP-4QMU2SQ"
  }, {
    "name" : "thread",
    "value" : "24608-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "testcase.test_register_login"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ "run(order=1)", "register" ]
  },
  "source" : "2dd5d035e0a53755.json",
  "parameterValues" : [ ]
}